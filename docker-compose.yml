version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: av-catalog-converter
    ports:
      - "8080:8080"
    volumes:
      - ./data/input:/app/data/input
      - ./data/output:/app/data/output
      - ./logs:/app/logs
      - ./cache:/app/cache
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - TRANSFORMERS_CACHE=/app/cache/models
      - TORCH_HOME=/app/cache/torch
      - OMP_NUM_THREADS=4
      - TOKENIZERS_PARALLELISM=true
      # Test configuration
      - SKIP_TESTS=true  # Set to false to run tests on startup
      - CONTINUE_ON_TEST_FAILURE=true  # Set to false to stop on test failures
    # Use the entrypoint script to handle test execution and app startup
    entrypoint: ["/app/docker/entrypoint.sh"]
    command: ["--api", "--port", "8080"]
    restart: unless-stopped
    # Allocate more resources to the container
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Uncomment to add a database if needed
  # db:
  #   image: postgres:13
  #   container_name: av-catalog-db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=av_catalog
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
